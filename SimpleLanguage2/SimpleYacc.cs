// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  MIL8A-315-07
// DateTime: 06.03.2019 12:26:25
// UserName: user
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,ASSIGN=5,SEMICOLON=6,
    WHILE=7,FOR=8,TO=9,WRITE=10,PRINTLN=11,SKOBKA_O=12,
    SKOBKA_C=13,IF=14,THEN=15,ELSE=16,VAR=17,COLUMN=18,
    ADD=19,SUB=20,MULT=21,DIV=22,EQUALS=23,LOGIC_AND=24,
    TRUE=25,FALSE=26,LOGIC_OR=27,INUM=28,RNUM=29,ID=30};

public struct ValueType
{ 
            public double dVal; 
            public int iVal; 
            public string sVal; 
            public Node nVal;
            public ExprNode eVal;
            public StatementNode stVal;
            public LogicExprNode logVal;
            public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
	private bool InDefSect = false;
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[43];
  private static State[] states = new State[81];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "T", "F", "logic_expr", "logic_T", "logic_F", "assign", 
      "statement", "while", "for", "write", "if", "var", "varlist", "stlist", 
      "block", "progr", "$accept", "Anon@1", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-18,1,-17,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3,new int[]{-16,5});
    states[5] = new State(new int[]{4,6,30,18,7,31,8,37,10,46,14,51,17,60,3,4},new int[]{-9,7,-8,8,-2,10,-10,30,-11,36,-12,44,-13,50,-14,58,-17,66});
    states[6] = new State(-40);
    states[7] = new State(-4);
    states[8] = new State(new int[]{6,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{5,11});
    states[11] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-1,12,-3,29,-4,28,-2,17});
    states[12] = new State(new int[]{19,13,20,24,6,-14,9,-14});
    states[13] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-3,14,-4,28,-2,17});
    states[14] = new State(new int[]{21,15,22,26,19,-29,20,-29,6,-29,9,-29,13,-29});
    states[15] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-4,16,-2,17});
    states[16] = new State(-32);
    states[17] = new State(-34);
    states[18] = new State(-12);
    states[19] = new State(-35);
    states[20] = new State(-36);
    states[21] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-1,22,-3,29,-4,28,-2,17});
    states[22] = new State(new int[]{13,23,19,13,20,24});
    states[23] = new State(-37);
    states[24] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-3,25,-4,28,-2,17});
    states[25] = new State(new int[]{21,15,22,26,19,-30,20,-30,6,-30,9,-30,13,-30});
    states[26] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-4,27,-2,17});
    states[27] = new State(-33);
    states[28] = new State(-31);
    states[29] = new State(new int[]{21,15,22,26,19,-28,20,-28,6,-28,9,-28,13,-28});
    states[30] = new State(-6);
    states[31] = new State(new int[]{12,32});
    states[32] = new State(new int[]{30,18,25,72,26,73,12,74},new int[]{-5,33,-6,77,-7,78,-2,71});
    states[33] = new State(new int[]{13,34,27,67});
    states[34] = new State(new int[]{30,18,7,31,8,37,10,46,14,51,17,60,3,4},new int[]{-9,35,-8,8,-2,10,-10,30,-11,36,-12,44,-13,50,-14,58,-17,66});
    states[35] = new State(-41);
    states[36] = new State(-7);
    states[37] = new State(new int[]{12,38});
    states[38] = new State(new int[]{30,18},new int[]{-8,39,-2,10});
    states[39] = new State(new int[]{9,40});
    states[40] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-1,41,-3,29,-4,28,-2,17});
    states[41] = new State(new int[]{13,42,19,13,20,24});
    states[42] = new State(new int[]{30,18,7,31,8,37,10,46,14,51,17,60,3,4},new int[]{-9,43,-8,8,-2,10,-10,30,-11,36,-12,44,-13,50,-14,58,-17,66});
    states[43] = new State(-42);
    states[44] = new State(new int[]{6,45});
    states[45] = new State(-8);
    states[46] = new State(new int[]{12,47});
    states[47] = new State(new int[]{30,18,28,19,29,20,12,21},new int[]{-1,48,-3,29,-4,28,-2,17});
    states[48] = new State(new int[]{13,49,19,13,20,24});
    states[49] = new State(-13);
    states[50] = new State(-9);
    states[51] = new State(new int[]{12,52});
    states[52] = new State(new int[]{30,18,25,72,26,73,12,74},new int[]{-5,53,-6,77,-7,78,-2,71});
    states[53] = new State(new int[]{13,54,27,67});
    states[54] = new State(new int[]{30,18,7,31,8,37,10,46,14,51,17,60,3,4},new int[]{-9,55,-8,8,-2,10,-10,30,-11,36,-12,44,-13,50,-14,58,-17,66});
    states[55] = new State(new int[]{16,56,4,-38,30,-38,7,-38,8,-38,10,-38,14,-38,17,-38,3,-38});
    states[56] = new State(new int[]{30,18,7,31,8,37,10,46,14,51,17,60,3,4},new int[]{-9,57,-8,8,-2,10,-10,30,-11,36,-12,44,-13,50,-14,58,-17,66});
    states[57] = new State(-39);
    states[58] = new State(new int[]{6,59});
    states[59] = new State(-10);
    states[60] = new State(-15,new int[]{-20,61});
    states[61] = new State(new int[]{30,18},new int[]{-15,62,-2,65});
    states[62] = new State(new int[]{18,63,6,-16});
    states[63] = new State(new int[]{30,18},new int[]{-2,64});
    states[64] = new State(-18);
    states[65] = new State(-17);
    states[66] = new State(-11);
    states[67] = new State(new int[]{30,18,25,72,26,73,12,74},new int[]{-6,68,-7,78,-2,71});
    states[68] = new State(new int[]{24,69,13,-20,27,-20});
    states[69] = new State(new int[]{30,18,25,72,26,73,12,74},new int[]{-7,70,-2,71});
    states[70] = new State(-23);
    states[71] = new State(-24);
    states[72] = new State(-25);
    states[73] = new State(-26);
    states[74] = new State(new int[]{30,18,25,72,26,73,12,74},new int[]{-5,75,-6,77,-7,78,-2,71});
    states[75] = new State(new int[]{13,76,27,67});
    states[76] = new State(-27);
    states[77] = new State(new int[]{24,69,13,-19,27,-19});
    states[78] = new State(new int[]{23,79,24,-21,13,-21,27,-21});
    states[79] = new State(new int[]{30,18,25,72,26,73,12,74},new int[]{-7,80,-2,71});
    states[80] = new State(-22);

    rules[1] = new Rule(-19, new int[]{-18,2});
    rules[2] = new Rule(-18, new int[]{-17});
    rules[3] = new Rule(-16, new int[]{});
    rules[4] = new Rule(-16, new int[]{-16,-9});
    rules[5] = new Rule(-9, new int[]{-8,6});
    rules[6] = new Rule(-9, new int[]{-10});
    rules[7] = new Rule(-9, new int[]{-11});
    rules[8] = new Rule(-9, new int[]{-12,6});
    rules[9] = new Rule(-9, new int[]{-13});
    rules[10] = new Rule(-9, new int[]{-14,6});
    rules[11] = new Rule(-9, new int[]{-17});
    rules[12] = new Rule(-2, new int[]{30});
    rules[13] = new Rule(-12, new int[]{10,12,-1,13});
    rules[14] = new Rule(-8, new int[]{-2,5,-1});
    rules[15] = new Rule(-20, new int[]{});
    rules[16] = new Rule(-14, new int[]{17,-20,-15});
    rules[17] = new Rule(-15, new int[]{-2});
    rules[18] = new Rule(-15, new int[]{-15,18,-2});
    rules[19] = new Rule(-5, new int[]{-6});
    rules[20] = new Rule(-5, new int[]{-5,27,-6});
    rules[21] = new Rule(-6, new int[]{-7});
    rules[22] = new Rule(-6, new int[]{-7,23,-7});
    rules[23] = new Rule(-6, new int[]{-6,24,-7});
    rules[24] = new Rule(-7, new int[]{-2});
    rules[25] = new Rule(-7, new int[]{25});
    rules[26] = new Rule(-7, new int[]{26});
    rules[27] = new Rule(-7, new int[]{12,-5,13});
    rules[28] = new Rule(-1, new int[]{-3});
    rules[29] = new Rule(-1, new int[]{-1,19,-3});
    rules[30] = new Rule(-1, new int[]{-1,20,-3});
    rules[31] = new Rule(-3, new int[]{-4});
    rules[32] = new Rule(-3, new int[]{-3,21,-4});
    rules[33] = new Rule(-3, new int[]{-3,22,-4});
    rules[34] = new Rule(-4, new int[]{-2});
    rules[35] = new Rule(-4, new int[]{28});
    rules[36] = new Rule(-4, new int[]{29});
    rules[37] = new Rule(-4, new int[]{12,-1,13});
    rules[38] = new Rule(-13, new int[]{14,12,-5,13,-9});
    rules[39] = new Rule(-13, new int[]{14,12,-5,13,-9,16,-9});
    rules[40] = new Rule(-17, new int[]{3,-16,4});
    rules[41] = new Rule(-10, new int[]{7,12,-5,13,-9});
    rules[42] = new Rule(-11, new int[]{8,12,-8,9,-1,13,-9});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> /* empty */
{ 
                CurrentSemanticValue.blVal = new BlockNode(); 
            }
        break;
      case 4: // stlist -> stlist, statement
{ 
                ValueStack[ValueStack.Depth-2].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
                CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; 
            }
        break;
      case 5: // statement -> assign, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 6: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 7: // statement -> for
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> write, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 9: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> var, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 11: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 12: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 13: // write -> WRITE, SKOBKA_O, expr, SKOBKA_C
{ CurrentSemanticValue.stVal = new WriteNode(ValueStack[ValueStack.Depth-2].eVal); }
        break;
      case 14: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 15: // Anon@1 -> /* empty */
{ InDefSect = true; }
        break;
      case 16: // var -> VAR, Anon@1, varlist
{ 
			foreach (var v in (ValueStack[ValueStack.Depth-1].stVal as VarDefNode).vars)
				SymbolTable.NewVarDef(v.Name, type.tint);
			InDefSect = false;	
		}
        break;
      case 17: // varlist -> ident
{ 
			CurrentSemanticValue.stVal = new VarDefNode(ValueStack[ValueStack.Depth-1].eVal as IdNode); 
		}
        break;
      case 18: // varlist -> varlist, COLUMN, ident
{ 
			(ValueStack[ValueStack.Depth-3].stVal as VarDefNode).Add(ValueStack[ValueStack.Depth-1].eVal as IdNode);
			CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-3].stVal;
		}
        break;
      case 19: // logic_expr -> logic_T
{ CurrentSemanticValue.logVal = ValueStack[ValueStack.Depth-1].logVal; }
        break;
      case 20: // logic_expr -> logic_expr, LOGIC_OR, logic_T
{ CurrentSemanticValue.logVal = new LogicOperationNode(ValueStack[ValueStack.Depth-3].logVal, ValueStack[ValueStack.Depth-1].logVal, SimpleParser.Tokens.LOGIC_OR); }
        break;
      case 21: // logic_T -> logic_F
{ CurrentSemanticValue.logVal = ValueStack[ValueStack.Depth-1].logVal as LogicExprNode; }
        break;
      case 22: // logic_T -> logic_F, EQUALS, logic_F
{ CurrentSemanticValue.logVal = new LogicOperationNode(ValueStack[ValueStack.Depth-3].logVal, ValueStack[ValueStack.Depth-1].logVal, SimpleParser.Tokens.EQUALS); }
        break;
      case 23: // logic_T -> logic_T, LOGIC_AND, logic_F
{ CurrentSemanticValue.logVal = new LogicOperationNode(ValueStack[ValueStack.Depth-3].logVal, ValueStack[ValueStack.Depth-1].logVal, SimpleParser.Tokens.LOGIC_AND); }
        break;
      case 24: // logic_F -> ident
{CurrentSemanticValue.logVal = new LogicIdNode(ValueStack[ValueStack.Depth-1].eVal as IdNode); }
        break;
      case 25: // logic_F -> TRUE
{ CurrentSemanticValue.logVal = new LogicNumNode(true); }
        break;
      case 26: // logic_F -> FALSE
{ CurrentSemanticValue.logVal = new LogicNumNode(false); }
        break;
      case 27: // logic_F -> SKOBKA_O, logic_expr, SKOBKA_C
{ CurrentSemanticValue.logVal = ValueStack[ValueStack.Depth-2].logVal as LogicExprNode; }
        break;
      case 28: // expr -> T
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 29: // expr -> expr, ADD, T
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '+'/*SimpleParser.Tokens.ADD*/); }
        break;
      case 30: // expr -> expr, SUB, T
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '-'/*SimpleParser.Tokens.SUB*/); }
        break;
      case 31: // T -> F
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 32: // T -> T, MULT, F
{ CurrentSemanticValue.eVal = new BinOpNode ( ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '*'/*SimpleParser.Tokens.MULT*/); }
        break;
      case 33: // T -> T, DIV, F
{ CurrentSemanticValue.eVal = new BinOpNode (ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '/'/*SimpleParser.Tokens.DIV*/); }
        break;
      case 34: // F -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 35: // F -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 36: // F -> RNUM
{ CurrentSemanticValue.eVal = new DoubleNumNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 37: // F -> SKOBKA_O, expr, SKOBKA_C
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal as ExprNode; }
        break;
      case 38: // if -> IF, SKOBKA_O, logic_expr, SKOBKA_C, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-3].logVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 39: // if -> IF, SKOBKA_O, logic_expr, SKOBKA_C, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-5].logVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 40: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 41: // while -> WHILE, SKOBKA_O, logic_expr, SKOBKA_C, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].logVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 42: // for -> FOR, SKOBKA_O, assign, TO, expr, SKOBKA_C, statement
{ CurrentSemanticValue.stVal = new ForNode(ValueStack[ValueStack.Depth-5].stVal as AssignNode, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
